{
  "comments": [
    {
      "key": {
        "uuid": "baa201ad_30cce835",
        "filename": "lib/NGCP/Panel/Controller/API/SubscriberRegistrationsItem.pm",
        "patchSetId": 9
      },
      "lineNbr": 116,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2018-01-11T12:12:04Z",
      "side": 1,
      "message": "pull\n\nmy ($guard, $txn_ok) \u003d ($c-\u003emodel(\u0027DB\u0027)-\u003etxn_scope_guard, 0);\n\nabove this?",
      "range": {
        "startLine": 116,
        "startChar": 26,
        "endLine": 116,
        "endChar": 36
      },
      "revId": "db23c00d318aabb55746441032e2c9b706542b1b",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_70a4b057",
        "filename": "lib/NGCP/Panel/Controller/API/SubscriberRegistrationsItem.pm",
        "patchSetId": 9
      },
      "lineNbr": 116,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2018-01-11T12:50:12Z",
      "side": 1,
      "message": "does the item_by_id() call do anything that requires an actual data rollback ? or if no item is returned it we can simply return from the scope with NOT_FOUND",
      "parentUuid": "baa201ad_30cce835",
      "range": {
        "startLine": 116,
        "startChar": 26,
        "endLine": 116,
        "endChar": 36
      },
      "revId": "db23c00d318aabb55746441032e2c9b706542b1b",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_70bbd072",
        "filename": "lib/NGCP/Panel/Controller/API/SubscriberRegistrationsItem.pm",
        "patchSetId": 9
      },
      "lineNbr": 116,
      "author": {
        "id": 1000013
      },
      "writtenOn": "2018-01-11T13:14:39Z",
      "side": 1,
      "message": "not regarding rollback, but to prevent repeatable read anomaly, i usually wrap a seqence of read quer by one txn.\n\none transaction for  the read statments (there may be more than one whatever dbix does under the hood) means they work on the same snapshot. so so in contrast to each stmt in own (autocommit) txn, singe txn covering all the selects makes it safe against the repeatable read problem.",
      "parentUuid": "baa201ad_70a4b057",
      "range": {
        "startLine": 116,
        "startChar": 26,
        "endLine": 116,
        "endChar": 36
      },
      "revId": "db23c00d318aabb55746441032e2c9b706542b1b",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_1063641b",
        "filename": "lib/NGCP/Panel/Controller/API/SubscriberRegistrationsItem.pm",
        "patchSetId": 9
      },
      "lineNbr": 116,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2018-01-11T13:25:04Z",
      "side": 1,
      "message": "true, good point!",
      "parentUuid": "baa201ad_70bbd072",
      "range": {
        "startLine": 116,
        "startChar": 26,
        "endLine": 116,
        "endChar": 36
      },
      "revId": "db23c00d318aabb55746441032e2c9b706542b1b",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "baa201ad_70403057",
        "filename": "lib/NGCP/Panel/Controller/API/SubscriberRegistrationsItem.pm",
        "patchSetId": 9
      },
      "lineNbr": 116,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2018-01-11T13:56:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baa201ad_70bbd072",
      "range": {
        "startLine": 116,
        "startChar": 26,
        "endLine": 116,
        "endChar": 36
      },
      "revId": "db23c00d318aabb55746441032e2c9b706542b1b",
      "serverId": "85315e57-5f03-49c3-83f8-201ae2313a75",
      "unresolved": false
    }
  ]
}